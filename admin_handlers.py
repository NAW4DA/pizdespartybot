from bot import bot
from database import cursor, conn
from telebot import types
from io import BytesIO
import logging
from button_menu import *
from datetime import timedelta, datetime
from datetime import datetime as dt

logging.basicConfig(level=logging.DEBUG)

warn_admin = []

def is_admin(user_id):
    cursor.execute("SELECT level FROM admins WHERE user_id=?", (user_id,))
    admin_info = cursor.fetchone()
    return admin_info is not None and admin_info[0] > 0

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_main_menu(message):
    bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_main_menu())

@bot.message_handler(func=lambda message: message.text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
def admin_panel(message):
    logging.debug(f"Received 'üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' from {message.chat.id}")
    cursor.execute("SELECT level FROM admins WHERE user_id=?", (message.chat.id,))
    admin = cursor.fetchone()
    if admin:
        with open('images/adminxd.gif', 'rb') as gif:
            bot.send_animation(message.chat.id, gif, caption="üîª –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\nüîª –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=create_into_admin_menu(admin[0]))
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")

@bot.message_handler(func=lambda message: message.text == "üë• –†–∞—Å—Å—ã–ª–∫–∞")
def manage_users(message):
    cursor.execute("SELECT level FROM admins WHERE user_id=?", (message.chat.id,))
    admin = cursor.fetchone()

    if admin and admin[0] >= 2:
        cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        markup = types.InlineKeyboardMarkup().add(cancel_button)
        with open('images/example.png', 'rb') as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=markup,
                parse_mode="Markdown"
            )
        bot.register_next_step_handler(message, handle_broadcast_message)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Ä–æ–≤–Ω—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å 2 –∏–ª–∏ –≤—ã—à–µ.")

def handle_broadcast_message(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        return

    broadcast_message = message.text
    cursor.execute("SELECT chat_id FROM users")
    users = cursor.fetchall()
    
    successful = 0
    failed = 0

    for user in users:
        try:
            bot.send_message(user[0], broadcast_message, parse_mode='Markdown')
            successful += 1
        except:
            failed += 1

    bot.send_message(
        message.chat.id,
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {successful}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å: {failed}"
    )

@bot.message_handler(func=lambda message: message.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±")
def view_reports(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    send_next_report(message.chat.id)

def send_next_report(admin_id):
    cursor.execute("SELECT id, reporter_username, reporter_user_id, reported_username, reported_user_id, reason, report_text FROM reports WHERE resolved IS NULL")
    report = cursor.fetchone()
    if report:
        report_id = report[0]
        reporter_username = report[1]
        reporter_user_id = report[2]
        reported_username = report[3]
        reported_user_id = report[4]
        reason = report[5]
        report_text = report[6]

        cursor.execute("SELECT name, age, description, photo FROM users WHERE chat_id=?", (reported_user_id,))
        reported_user_info = cursor.fetchone()
        reported_name = reported_user_info[0]
        reported_age = reported_user_info[1]
        reported_description = reported_user_info[2]
        reported_photo = reported_user_info[3]

        profile_text = f"{reported_name}, {reported_age} –ª–µ—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ - {reported_description}"

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {report_id}", f"‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å {report_id}", f"ü•∂ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—É {report_id}")

        report_message = f"üö® –ñ–∞–ª–æ–±–∞ #{report_id}\n\n" \
                         f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{reporter_username} (ID: {reporter_user_id})\n" \
                         f"–ù–∞—Ä—É—à–∏—Ç–µ–ª—å: @{reported_username} (ID: {reported_user_id})\n\n" \
                         f"–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã: {reason}\n\n" \
                         f"–ê–Ω–∫–µ—Ç–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è (ID: {reported_user_id}):\n{profile_text}"

        if reported_photo:
            photo_bytes = BytesIO(reported_photo)
            bot.send_photo(admin_id, photo_bytes, caption=report_message, reply_markup=markup)
        else:
            bot.send_message(admin_id, report_message, reply_markup=markup)
    else:
        bot.send_message(admin_id, "‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∂–∞–ª–æ–±.", reply_markup=create_admin_menu())

@bot.message_handler(func=lambda message: message.text.startswith("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å "))
def block_user(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        report_id = int(message.text.split(" ")[2])
        cursor.execute("SELECT reported_user_id FROM reports WHERE id = ?", (report_id,))
        reported_user_id = cursor.fetchone()[0]
        cursor.execute("INSERT INTO blocked_users (user_id) VALUES (?)", (reported_user_id,))
        cursor.execute("UPDATE reports SET resolved = 1, resolved_by = ? WHERE id = ?", (message.chat.id, report_id))
        conn.commit()
        bot.send_message(message.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reported_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        send_next_report(message.chat.id)
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

@bot.message_handler(func=lambda message: message.text.startswith("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"))
def unblock_user(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_unblock")
        markup = types.InlineKeyboardMarkup().add(cancel_button)
        unblock_message = "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
        sent_message = bot.send_message(message.chat.id, unblock_message, reply_markup=markup)
        bot.register_next_step_handler(sent_message, handle_unblock_user)
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

def handle_unblock_user(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        cursor.execute("SELECT level FROM admins WHERE user_id=?", (message.chat.id,))
        admin = cursor.fetchone()
        if admin:
            bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...", reply_markup=create_into_admin_menu(admin[0]))
        else:
            bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=create_main_menu())
        return

    try:
        user_id_to_unblock = int(message.text)
        
        cursor.execute("DELETE FROM blocked_users WHERE user_id = ?", (user_id_to_unblock,))
        conn.commit()
        
        if cursor.rowcount > 0:
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_unblock} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_unblock} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "cancel_unblock")
def cancel_unblock_callback(call):
    cursor.execute("SELECT level FROM admins WHERE user_id=?", (call.message.chat.id,))
    admin = cursor.fetchone()
    if admin:
        bot.send_message(call.message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...", reply_markup=create_into_admin_menu(admin[0]))
    else:
        bot.send_message(call.message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=create_main_menu())


@bot.message_handler(func=lambda message: message.text.startswith("‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å "))
def ignore_user(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        report_id = int(message.text.split(" ")[2])
        cursor.execute("UPDATE reports SET resolved = 0, resolved_by = ? WHERE id = ?", (message.chat.id, report_id))
        conn.commit()
        bot.send_message(message.chat.id, f"‚ÑπÔ∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        send_next_report(message.chat.id)
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

@bot.message_handler(func=lambda message: message.text.startswith("ü•∂ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—É "))
def freeze_user(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        report_id = int(message.text.split(" ")[3])
        cursor.execute("SELECT reported_user_id FROM reports WHERE id = ?", (report_id,))
        reported_user_id = cursor.fetchone()[0]
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("üïí 1 —á–∞—Å", "üìÜ 1 –¥–µ–Ω—å", "üìÜ 1 –Ω–µ–¥–µ–ª—è", "üìÜ 1 –º–µ—Å—è—Ü")
        bot.send_message(message.chat.id, "‚è± –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–º–æ—Ä–æ–∑–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, process_freeze_duration, reported_user_id, report_id)
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

def process_freeze_duration(message, reported_user_id, report_id):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    duration = message.text
    now = dt.now()
    if duration == "üïí 1 —á–∞—Å":
        freeze_until = now + timedelta(hours=1)
    elif duration == "üìÜ 1 –¥–µ–Ω—å":
        freeze_until = now + timedelta(days=1)
    elif duration == "üìÜ 1 –Ω–µ–¥–µ–ª—è":
        freeze_until = now + timedelta(weeks=1)
    elif duration == "üìÜ 1 –º–µ—Å—è—Ü":
        freeze_until = now + timedelta(days=30)
    freeze_until = freeze_until.strftime("%Y-%m-%d %H:%M")
    cursor.execute("INSERT INTO frozen_users (user_id, freeze_until) VALUES (?, ?)", (reported_user_id, freeze_until))
    cursor.execute("UPDATE reports SET resolved = 1, resolved_by = ? WHERE id = ?", (message.chat.id, report_id))
    conn.commit()
    bot.send_message(message.chat.id, f"‚ùÑÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reported_user_id} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ {freeze_until}.")
    send_next_report(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "ü•∂ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–¥–º–∏–Ω–æ–≤")
def admin_view_command(message):
    cursor.execute("SELECT level FROM admins WHERE user_id = ?", (message.chat.id,))
    admin = cursor.fetchone()

    if admin and admin[0] >= 3:
        view_admins(message)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å 3 –∏–ª–∏ –≤—ã—à–µ.")

def view_admins(message):
    cursor.execute("SELECT username, user_id, level FROM admins")
    admins = cursor.fetchall()
    
    if admins:
        markup = types.InlineKeyboardMarkup(row_width=1)
        for admin in admins:
            username = admin[0] if admin[0] else f"Telegram ID: {admin[1]}"
            level = admin[2]
            button_text = f"{username} | LVL {level}"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=f"admin_info_{admin[1]}"))
        
        markup.add(types.InlineKeyboardButton("üßä –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"))
        
        bot.send_message(message.chat.id, "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –í —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")

@bot.callback_query_handler(func=lambda call: call.data == 'add_admin')
def add_admin_callback(call):
    bot.send_message(call.message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ @username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(call.message, process_new_admin_username)

def process_new_admin_username(message):
    new_admin_username = message.text.strip('@')
    try:
        cursor.execute("SELECT chat_id FROM users WHERE username = ?", (new_admin_username,))
        user_id = cursor.fetchone()
        if user_id:
            bot.send_message(message.chat.id, f"üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username}. –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (1-3):\n\nP.S \n1Ô∏è‚É£ LVL - –∂–∞–ª–æ–±—ã\n2Ô∏è‚É£ LVL - –∂–∞–ª–æ–±—ã + —Ä–∞—Å—Å—ã–ª–∫–∞\n3Ô∏è‚É£ LVL - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ + —Ä–∞—Å—Å—ã–ª–∫–∞")
            bot.register_next_step_handler(message, lambda m: process_new_admin_level(m, user_id[0], new_admin_username))
        else:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

def process_new_admin_level(message, new_admin_id, new_admin_username):
    try:
        new_level = int(message.text)
        if new_level < 1 or new_level > 3:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")
            return
        current_date = datetime.now().strftime("%Y-%m-%d %H:%–ú:%S")
        cursor.execute("INSERT INTO admins (user_id, username, level, joined_date) VALUES (?, ?, ?, ?)", (new_admin_id, f"@{new_admin_username}", new_level, current_date))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{new_admin_username} —Å ID {new_admin_id} –∏ —É—Ä–æ–≤–Ω–µ–º {new_level} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_info_'))
def admin_info_callback(call):
    admin_id = call.data.split('_')[2]
    cursor.execute("SELECT username, user_id, level, joined_date FROM admins WHERE user_id = ?", (admin_id,))
    admin_data = cursor.fetchone()
    if admin_data:
        username = admin_data[0]
        user_id = admin_data[1]
        level = admin_data[2]
        joined_date = admin_data[3]
        
        cursor.execute("SELECT COUNT(*) FROM reports WHERE resolved = 1 AND resolved_by = ?", (user_id,))
        resolved_reports = cursor.fetchone()[0]
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("üö´ –û—Ç—Å—Ç—Ä–∞–Ω–∏—Ç—å", callback_data=f"ban_admin_{admin_id}"),
            types.InlineKeyboardButton("üìä –£–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data=f"set_level_{admin_id}")
        )
        keyboard.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"))
        
        bot.send_message(call.message.chat.id, f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {username}\nüÜî *TG ID:* {user_id}\nüîí *–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* {level}\nüìÖ *–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:* {joined_date}\n‚úÖ *–†–µ—à–µ–Ω–æ –∂–∞–ª–æ–±:* {resolved_reports}", parse_mode='Markdown', reply_markup=keyboard)
    else:
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('ban_admin_'))
def ban_admin_callback(call):
    admin_id = call.data.split('_')[2]
    cursor.execute("DELETE FROM admins WHERE user_id = ?", (admin_id,))
    conn.commit()
    bot.answer_callback_query(call.id, "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_admin_menu')
def back_to_admin_menu_callback(call):
    cursor.execute("SELECT level FROM admins WHERE user_id = ?", (call.message.chat.id,))
    admin = cursor.fetchone()
    if admin:
        bot.send_message(call.message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=create_into_admin_menu(admin[0]))
    else:
        bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_level_'))
def set_level_callback(call):
    admin_id = call.data.split('_')[2]
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (1-3):\n\nP.S \n1 LVL - –∂–∞–ª–æ–±—ã\n2 LVL - –∂–∞–ª–æ–±—ã + —Ä–∞—Å—Å—ã–ª–∫–∞ 3 LVL - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ + —Ä–∞—Å—Å—ã–ª–∫–∞")
    bot.register_next_step_handler(call.message, lambda message: process_level_setting(message, admin_id))

def process_level_setting(message, admin_id):
    try:
        new_level = int(message.text)
        if new_level < 1 or new_level > 3:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")
            return
        cursor.execute("UPDATE admins SET level = ? WHERE user_id = ?", (new_level, admin_id))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_level}")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")

@bot.message_handler(func=lambda message: message.text == "üö´ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è")
def change_user_for_appeal(message):
    cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_admin_menu")
    markup = types.InlineKeyboardMarkup().add(cancel_button)
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—É–¥–∞ –±—É–¥—É—Ç –ø–∏—Å–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_user_for_appeal)

def process_user_for_appeal(message):
    username_for_appeal = message.text
    warn_admin.clear()
    warn_admin.append(username_for_appeal)
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_for_appeal} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è.")
